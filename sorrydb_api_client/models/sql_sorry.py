# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SQLSorry(BaseModel):
    """
    SQLSorry
    """ # noqa: E501
    id: Optional[StrictStr]
    remote: StrictStr
    branch: StrictStr
    commit: StrictStr
    lean_version: StrictStr
    path: StrictStr
    start_line: StrictInt
    start_column: StrictInt
    end_line: StrictInt
    end_column: StrictInt
    goal: StrictStr
    url: StrictStr
    blame_email_hash: StrictStr
    blame_date: datetime
    inclusion_date: datetime
    __properties: ClassVar[List[str]] = ["id", "remote", "branch", "commit", "lean_version", "path", "start_line", "start_column", "end_line", "end_column", "goal", "url", "blame_email_hash", "blame_date", "inclusion_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SQLSorry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SQLSorry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "remote": obj.get("remote"),
            "branch": obj.get("branch"),
            "commit": obj.get("commit"),
            "lean_version": obj.get("lean_version"),
            "path": obj.get("path"),
            "start_line": obj.get("start_line"),
            "start_column": obj.get("start_column"),
            "end_line": obj.get("end_line"),
            "end_column": obj.get("end_column"),
            "goal": obj.get("goal"),
            "url": obj.get("url"),
            "blame_email_hash": obj.get("blame_email_hash"),
            "blame_date": obj.get("blame_date"),
            "inclusion_date": obj.get("inclusion_date")
        })
        return _obj


